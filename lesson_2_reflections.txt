1. What happens when you initialize a repository? Why do you need to do it?

	- When i initial a new repository a '.git' directory is created with no commits.
	  When running 'git status' it says that there is only an 'Initial commit'.
	- I need to do it to create n new repository.

2. How is the staging area different from the working directory and the repository? 
   What value do you think it offers?

   - The staging area stores all information about what will change with the next commit.
   - Staging areas allows to add several files/changes to the repository/working directoroy with
     one commit.    

3. How can you use the staging area to make sure you have one commit per logical change?

	- First run 'git diff' command to compare the working directory with the staging area.
	  Next run 'git diff --staged' to compare the staging area with the most recent commit.     

4. What are some situations when branches would be helpful in keeping your history organized?
   How would branches help?

   - Branches would be helpful when:
   		# adding/changing critical code to the project
   		# coding in a team where they working on different parts

   - With a branch with a working copy it is easy to rollback all changes.
   - Its easier to try different solutions in different branches   

5. How do the diagrams help you visualize the branch structure?

	- They show exactly what changes are made in the existing branches.   	

6. What is the result of merging two branches together? Why do we represent it in the diagram that 
   way we do?

   - The result of merging to branches together is a new commit with a version which contains
     all changes of both merged versions. 
   - The commits are sorted by its creation time therefore the parent of one commit is not the one
   	 below. To compare a commit without knowing its parent git has the 'show' command.
   	 (e.g git show commitID).
   - Reasons for presentation:
   		# To have an overview about all branches.
   		# To identify which commit belongs to which branch.
   		# To know when a merge was done.

7. What are the pros and cons of Git's automatic merging vs. always doing merges manually?

	Pros:
	- Fast merge of simple changes and non conflicting changes.
	- Good presentation of conflicting parts.

	Cons:
	- If someone does make more logical changes during one commit it might result in a long
	  merge.